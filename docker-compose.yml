version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mgnrega_postgres
    environment:
      POSTGRES_USER: mgnrega_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_me_in_production}
      POSTGRES_DB: mgnrega_tracker
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries=pg_stat_statements"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mgnrega_user -d mgnrega_tracker"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mgnrega_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mgnrega_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_me_in_production}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mgnrega_network

  # Node.js API Server
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: mgnrega_api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgres://mgnrega_user:${DB_PASSWORD:-change_me_in_production}@postgres:5432/mgnrega_tracker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-change_me_in_production}
      REDIS_MOCK: "false"
      API_RATE_LIMIT: 100
      API_RATE_WINDOW_MS: 900000
      CACHE_TTL: 86400
      ETL_SCHEDULE: "0 */6 * * *"
      DATA_RETENTION_DAYS: 365
    volumes:
      - ./server/.env:/app/.env:ro
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mgnrega_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ETL Service (Data Fetching)
  etl:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: mgnrega_etl
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://mgnrega_user:${DB_PASSWORD:-change_me_in_production}@postgres:5432/mgnrega_tracker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-change_me_in_production}
      ETL_SCHEDULE: "0 */6 * * *"
    command: node dist/etl/worker.js
    restart: unless-stopped
    networks:
      - mgnrega_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mgnrega_nginx
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./client/dist:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    environment:
      NGINX_HOST: ${DOMAIN:-localhost}
      NGINX_PORT: 80
    restart: unless-stopped
    networks:
      - mgnrega_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  mgnrega_network:
    driver: bridge